[
   {
      "chapter":"",
      "question":"What is the output of the joined Dataframe?&#10;Code:&#10;&#10;import numpy as np&#10;import pandas as pd&#10;&#10;df = pd.DataFrame([52, 46, 50, 51], columns = ['AAPL'], index = ['01-01', '01-02', '01-03', '01-04'])&#10;&#10;df = df.join(pd.DataFrame([83, 88, 86, 90], columns = ['SPY'], index = ['01-01', '01-02', '01-04', '01-05']))&#10;&#10;print df",
      "A":"&#10;AAPL        SPY &#10;01-01        52                83&#10;01-02        46                88&#10;01-03        50                86&#10;01-04        51                90",
      "B":"&#10;AAPL        SPY &#10;01-01        52                83&#10;01-02        46                88&#10;01-03        50                NaN&#10;01-04        51                86",
      "C":"&#10;AAPL        SPY &#10;01-01        52                83&#10;01-02        46                88&#10;01-03        50                NaN&#10;01-04        51                86&#10;01-05        NaN                90",
      "D":"&#10;AAPL        SPY &#10;01-01        52                83&#10;01-02        46                88&#10;01-04        51                86",
      "answer":"B",
      "why":"&#10;&#10;>>> import numpy as np&#10;>>> import pandas as pd&#10;>>> df = pd.DataFrame([52, 46, 50, 51], columns = ['APPL'], index = ['01-01', '01-02', '01-03', '01-04'])&#10;>>> df = df.join(pd.DataFrame([83, 88, 86, 90], columns = ['SPY'], index = ['01-01', '01-02', '01-04', '01-05']))&#10;>>> print df&#10;      APPL  SPY&#10;01-01    52   83&#10;01-02    46   88&#10;01-03    50  NaN&#10;01-04    51   86&#10;",
      "index":0
   },
   {
      "chapter":"",
      "question":"&10#;&10#;Which answer is the output of the following code?&10#;&10#;import pandas as pd&10#;import numpy as np&10#;&10#;d = {\"SPY\" : [86.80, 86.70, 87.28, 84.67, 85.01],&10#;    \"AAPL\": [90.36, 94.18, 92.62, 90.62, 92.30],&10#;    \"HNZ\" : [33.95, 33.82, 33.38, 32.59, 31.99],&10#;    \"XOM\" : [74.48, 74.47, 73.26, 71.39, 85.13],&10#;    \"GLD\" : [86.23, 84.48, 85.13, 82.75, 84.46]}&10#;&10#;df = pd.DataFrame(d)&10#;&10#;normed = df/df.ix[0]&10#;normed['AAPL'] = np.nan&10#;normed.fillna(value='0')&10#;print normed[0:2]",
      "A":"&10#;   AAPL       GLD       HNZ       SPY       XOM&10#;1   NaN  0.979705  0.996171  0.998848  0.999866&10#;2   NaN  0.987243  0.983211  1.005530  0.983620",
      "B":"&#10;   AAPL       GLD       HNZ       SPY       XOM&#10;1  94.18    84.48     33.82     86.70     74.47&#10;2  92.62    85.13     33.38     87.28     73.26",
      "C":"&#10;   AAPL       GLD       HNZ       SPY       XOM&#10;0   0     1.000000  1.000000  1.000000  1.000000&#10;1   0     0.979705  0.996171  0.998848  0.999866",
      "D":"&#10;   AAPL       GLD       HNZ       SPY       XOM&#10;0   NaN  1.000000  1.000000  1.000000  1.000000&#10;1   NaN  0.979705  0.996171  0.998848  0.999866",
      "answer":"D",
      "why":"&#10;&#10;>>> import pandas as pd&#10;>>> import numpy as np&#10;>>> &#10;>>> &#10;>>> d = {\"SPY\" : [86.80, 86.70, 87.28, 84.67, 85.01],&#10;...      \"AAPL\": [90.36, 94.18, 92.62, 90.62, 92.30],&#10;...      \"HNZ\" : [33.95, 33.82, 33.38, 32.59, 31.99],&#10;...      \"XOM\" : [74.48, 74.47, 73.26, 71.39, 85.13],&#10;...      \"GLD\" : [86.23, 84.48, 85.13, 82.75, 84.46]}&#10;>>> &#10;>>> df = pd.DataFrame(d)&#10;>>> normed = df/df.ix[0]&#10;>>> normed['AAPL'] = np.nan&#10;>>> normed.fillna(value='0')&#10; AAPL       GLD       HNZ       SPY       XOM&#10;0    0  1.000000  1.000000  1.000000  1.000000&#10;1    0  0.979705  0.996171  0.998848  0.999866&#10;2    0  0.987243  0.983211  1.005530  0.983620&#10;3    0  0.959643  0.959941  0.975461  0.958512&#10;4    0  0.979474  0.942268  0.979378  1.142991&#10;>>> &#10;>>> print normed[0:2]&#10;  AAPL       GLD       HNZ       SPY       XOM&#10;0   NaN  1.000000  1.000000  1.000000  1.000000&#10;1   NaN  0.979705  0.996171  0.998848  0.999866",
      "index":1
   },
   {
      "chapter":"",
      "question":"&#10;&#10;What will be the output of the following code snippet, specifically the final print statement?&#10;&#10;Code: &#10;&#10;import numpy as np&#10;array = np.ones((2,3,4))&#10;array = array * 2&#10;print array.sum(axis=None)&#10;",
      "A":"24",
      "B":" [[ 6.  6.  6.  6.]&#10;[ 6.  6.  6.  6.]]",
      "C":" [[ 8.  8.  8.]&#10;[ 8.  8.  8.]]",
      "D":" 48",
      "answer":"D",
      "why":"&#10;&#10;>>> import numpy as np&#10;&#10;>>> array = np.ones((2,3,4))&#10;&#10;>>> array = array * 2&#10;&#10;>>>print array.sum(axis=None)&#10;48.0",
      "index":2
   },
   {
      "chapter":"",
      "question":"How should section A be filled in to complete code that will cause the following output:&#10;&#10;Code:&#10;&#10;import pandas as pd&#10;import numpy as np&#10;&#10;x = True&#10;df1 = pd.DataFrame([[1,0,-5],[2,0,-1],[1,4,0]])&#10;___A___&#10;df1[f(df1)] = \"!!!\"&#10;print df1&#10;&#10;Output:&#10;&#10;    0    1    2&#10;0    1    0  !!!&#10;1  !!!    0   -1&#10;2    1  !!!    0&#10;&#10;Select one answer:&#10;&#10;        a) f = lambda x: x>1&#10;        b) f = lambda x: np.abs(x)>=0&#10;        c) f = lambda x: np.abs(x)>1&#10;        d) f = lambda x: x>0",
      "answer":" c",
      "why":"&#10;>>> import pandas as pd&#10;>>> import numpy as np&#10;>>> &#10;>>> x = True&#10;>>> df1 = pd.DataFrame([[1,0,-5],[2,0,-1],[1,4,0]])&#10;>>> f = lambda x: np.abs(x)>1&#10;>>> df1[f(df1)] = \"!!!\"&#10;>>> print df1&#10;    0    1    2&#10;0    1    0  !!!&#10;1  !!!    0   -1&#10;2    1  !!!    0",
      "index":3
   },
   {
      "chapter":"",
      "question":"How should section _A_ be filled in to complete code that will cause the following output:&#10;&#10;Code:&#10;&#10;import numpy as np&#10;&#10;a = np.ones((3,3))&#10;print a&#10;b = a &#10;b[0,1] = 2&#10;&#10;print b&#10;print a&#10;&#10;b  = _A_   # what should be filled instead of _A_ for below ouputs to be true ?&#10;&#10;b[0,1] = 3&#10;print b&#10;print a&#10;&#10;Output:&#10;&#10;[[ 1.  1.  1.]&#10;[ 1.  1.  1.]&#10;[ 1.  1.  1.]]&#10;&#10;[[ 1.  2.  1.]&#10;[ 1.  1.  1.]&#10;[ 1.  1.  1.]]&#10;&#10;[[ 1.  2.  1.]&#10;[ 1.  1.  1.]&#10;[ 1.  1.  1.]]&#10;&#10;[[ 1.  3.  1.]&#10;[ 1.  1.  1.]&#10;[ 1.  1.  1.]]&#10;&#10;[[ 1.  2.  1.]&#10;[ 1.  1.  1.]&#10;[ 1.  1.  1.]]&#10;",
      "A":" a[0,0] = 2",
      "B":" a.copy()",
      "C":" b[1,1] = 3",
      "D":" b[1,0] = 3",
      "answer":"B",
      "why":">>> import numpy as np&#10;>>> a = np.ones((3,3))&#10;>>> print a&#10;[[ 1.  1.  1.]&#10;[ 1.  1.  1.]&#10;[ 1.  1.  1.]]&#10;>>> b = a&#10;>>> b[0,1] = 2&#10;>>> print b&#10;[[ 1.  2.  1.]&#10;[ 1.  1.  1.]&#10;[ 1.  1.  1.]]&#10;>>> print a&#10;[[ 1.  2.  1.]&#10;[ 1.  1.  1.]&#10;[ 1.  1.  1.]]&#10;>>> b = a.copy()&#10;>>> print b&#10;[[ 1.  3.  1.]&#10;[ 1.  1.  1.]&#10;[ 1.  1.  1.]]&#10;>>> print a&#10;[[ 1.  2.  1.]&#10;[ 1.  1.  1.]&#10;[ 1.  1.  1.]]&#10;&#10;",
      "index":4
   },
   {
      "chapter":"",
      "question":"What is the output of the following code?&#10;&#10;import numpy as np&#10;&#10;a = np.array([2]*4)&#10;&#10;b = np.array([1, 2, 3, 4, 5, 6, 7])&#10;b[1:] * a[-1]&#10;",
      "A":" array([ 4,  6,  8, 10, 12, 14])",
      "B":" array([ 1, 2, 3, 4, 5, 6, 7])",
      "C":" array([ 2, 4,  6,  8, 10, 12, 14])",
      "D":" array([ 3, 9, 12, 15, 18])",
      "answer":"A",
      "why":">>> import numpy as np&#10;>>> &#10;>>> a = np.array([2]*4)&#10;>>> &#10;>>> b = np.array([1, 2, 3, 4, 5, 6, 7])&#10;>>> b[1:] * a[-1]&#10;array([ 4,  6,  8, 10, 12, 14])&#10;&#10;",
      "index":5
   },
   {
      "chapter":"",
      "question":"1. What is the output of the following code&#10;&#10;Code:&#10;&#10;j = [8, 7, 6, 5, 4, 3, 2, 1]&#10;print [x/j[-2] for x in j[1:-1]]",
      "A":" [4.0, 3.5, 3.0, 2.5, 2.0, 1.5, 1.0, 0.5]",
      "B":" [3.5, 3.0, 2.5, 2.0, 1.5, 1.0, 0.5]",
      "C":" [3, 3, 2, 2, 1, 1]",
      "D":" [3, 3, 2, 2, 1, 1, 0]",
      "answer":"C",
      "why":">>> j = [8, 7, 6, 5, 4, 3, 2, 1]&#10;>>> print [x/j[-2] for x in j[1:-1]]&#10;[3, 3, 2, 2, 1, 1]&#10;&#10;",
      "index":6
   },
   {
      "chapter":"",
      "question":"What is the output of the following code?&#10;&#10;Code:&#10;import pandas as pd&#10;import numpy as np&#10;&#10;syms=['IBM', 'AAPL', 'HNZ', 'XOM', 'GLD']&#10;prices =  pd.DataFrame(np.random.rand(10, len(syms)),columns=syms)&#10;print prices.tail(1).values&#10;",
      "A":"&#10;       IBM      AAPL       HNZ       XOM       GLD&#10;5  0.596553  0.654170  0.020114  0.889447  0.024598&#10;6  0.557738  0.478691  0.011598  0.812025  0.668150&#10;7  0.231585  0.993491  0.302910  0.261203  0.659507&#10;8  0.715009  0.244946  0.644569  0.415497  0.827711&#10;9  0.282840  0.814612  0.542779  0.325938  0.387805",
      "B":" &#10;       IBM     AAPL       HNZ       XOM       GLD&#10;0  0.021792  0.41759  0.628591  0.834644  0.118658",
      "C":"[[ 0.28284041  0.81461207  0.54277906  0.32593834  0.3878054 ]]",
      "D":" &#10;      IBM      AAPL       HNZ       XOM       GLD&#10;9  0.28284  0.814612  0.542779  0.325938  0.387805",
      "answer":"C",
	  "why":"&#10;print prices.tail(1).values&#10;.tail = display the last 5 rows in array including column headers&#10;.tail(1) = display only the last row in the array including column headers&#10;.tail(1).values = display only the values of the last row in the array without column headers&#10;&#10;",
      "index":7
   },
   {
      "chapter":"",
      "question":"Which of the following is a valid output of the following code?&#10;&#10;Code:&#10;&#10;import numpy as np&#10;a = np.random.randint(10, 30, size=(2, 4))&#10;print a&#10;print a.size&#10;print a.shape[0]&#10;print a.shape[1]&#10;",
      "A":"&#10;[[5 14 10 10]&#10; [29 26 40 13]]&#10;8&#10;2&#10;4",
      "B":"&#10;[[21 14 10 10]&#10; [29 26 19 13]]&#10;8&#10;4&#10;2",
      "C":"&#10;[[21 14 10 10]&#10; [29 26 19 13]]&#10;8&#10;2&#10;4",
      "D":"&#10;[[21 14]&#10; [0 26]&#10; [29 15]&#10; [12 4]]&#10;4&#10;2&#10;4",
      "answer":"C",
      "why":">>> import numpy as np&#10;>>> a = np.random.randint(10, 30, size=(2, 4))&#10;>>> print a&#10;[[21 14 10 10]&#10;        [29 26 19 13]]&#10;>>> print a.size&#10;8&#10;>>> print a.shape[0]&#10;2&#10;>>> print a.shape[1]&#10;4&#10;&#10;",
      "index":8
   },
   {
      "chapter":"",
      "question":"A donut shop owner sells 3 items (coffee, donuts, and bagels) and wants to calculate the following for a week of sales&#10;(1) total sales, (2) daily sales, and (3) item sales&#10;&#10;Code:&#10;&#10;import numpy as np&#10;import pandas as pd&#10;&#10;weekSales =  pd.DataFrame(np.random.random([7,3])*100, &#10;            index=['Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat'], &#10;            columns=['Coffee', 'Donuts', 'Bagels'])&#10;&#10;print weekSales&#10;&#10;print _A_&#10;print _B_&#10;print _C_&#10;&#10;Output:&#10;         Coffee     Donuts     Bagels&#10;Sun    33.530433   9.862755  53.781308&#10;Mon    29.831218  84.473341  34.325790&#10;Tues   78.021005  84.196225  27.752726&#10;Wed    85.667444   2.104389   0.696575&#10;Thurs  74.328857  56.910230  24.484673&#10;Fri    76.807376  67.794258  17.389399&#10;Sat    84.438981   3.740902  58.141248&#10;&#10;988.27913306218318&#10;&#10;Sun       97.174496&#10;Mon      148.630350&#10;Tues     189.969956&#10;Wed       88.468408&#10;Thurs    155.723760&#10;Fri      161.991033&#10;Sat      146.321131&#10;&#10;Coffee    462.625316&#10;Donuts    309.082100&#10;Bagels    216.571718&#10;&#10;What code A, B, and C are used to produce that output?",
      "A":" weekSales.sum(), weekSales.sum(axis=1), weekSales.sum(axis=0)",
      "B":" weekSales.sum().sum(), weekSales.sum(axis=0), weekSales.sum(axis=1)",
      "C":" neither a nor b",
      "D":" either a or b",
      "answer":"C",
      "why":">>> import numpy as np&#10;>>> import pandas as pd&#10;>>> weekSales = pd.DataFrame(np.random.random([7,3])*100, index=['Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat'], columns=['Coffee', 'Donuts', 'Bagels'])&#10;>>> print weekSales&#10;         Coffee     Donuts     Bagels&#10;Sun    33.530433   9.862755  53.781308&#10;Mon    29.831218  84.473341  34.325790&#10;Tues   78.021005  84.196225  27.752726&#10;Wed    85.667444   2.104389   0.696575&#10;Thurs  74.328857  56.910230  24.484673&#10;Fri    76.807376  67.794258  17.389399&#10;Sat    84.438981   3.740902  58.141248&#10;&#10;>>> print weekSales.sum().sum()&#10;988.27913306218318&#10;&#10;>>> print weekSales.sum(axis=1)&#10;Sun       97.174496&#10;Mon      148.630350&#10;Tues     189.969956&#10;Wed       88.468408&#10;Thurs    155.723760&#10;Fri      161.991033&#10;Sat      146.321131&#10;dtype: float64&#10;&#10;>>> print weekSales.sum(axis=0)&#10;Coffee    462.625316&#10;Donuts    309.082100&#10;Bagels    216.571718&#10;dtype: float64&#10;&#10;",
      "index":9
   },
   {
      "chapter":"",
      "question":"How should section A be filled in to complete code that will cause the following output:&#10;&#10;# Code&#10;&#10;import numpy as np&#10;&#10;x = np.array([[1,2,3,4],&#10;             [4,5,6,7],&#10;             [8,9,0,1]])&#10;&#10;print _A_&#10;&#10;Output:&#10;[[1, 3],&#10;[4, 6],&#10;[8, 0]])&#10;",
      "A":" x[0,2]",
      "B":" x[:,0,2]",
      "C":" x[::2]",
      "D":" x[:,[0,2]]",
      "answer":"D",
	  "why":"&#10;&#10;In[1]: import numpy as np&#10;In[2]: x = np.array([[1,2,3,4],&#10;             [4,5,6,7],&#10;             [8,9,0,1]])&#10;In[3]: print x[:,[0,2]]&#10;[[1 3]&#10;[4 6]&#10;[8 0]]",
      "index":10
   },
   {
      "chapter":"",
      "question":"How should section A be filled in to complete code that will cause the following output:&#10;&#10;import numpy as np&#10;import pandas as pd&#10;&#10;dates = pd.date_range('2015-01-01', '2015-01-04', name='Date')&#10;df = pd.DataFrame(index=dates)&#10;df['count'] = [i for i in range(len(df))]&#10;&#10;print df&#10;&#10;__A__&#10;&#10;df.set_index('count', inplace=True)&#10;&#10;print df&#10;&#10;Output:&#10;           count &#10;Date              &#10;2015-01-01       0&#10;2015-01-02       1&#10;2015-01-03       2&#10;2015-01-04       3&#10;           Date &#10;count&#10;0      2015-01-01&#10;1      2015-01-02&#10;2      2015-01-03&#10;3      2015-01-04&#10;",
      "A":" df.reset_index(['Date'])",
      "B":" df.drop_index(['Date'])",
      "C":" df = df.reset_index(['Date'])",
      "D":" df.drop_index(['Date'], inplace=True)",
      "answer":"C",
      "why":">>> import numpy as np&#10;>>> import pandas as pd&#10;>>> dates = pd.date_range('2015-01-01', '2015-01-04', name='Date')&#10;>>> df = pd.DataFrame(index=dates)&#10;>>> df['count'] = [i for i in range(len(df))]&#10;>>> print df&#10;           count&#10;Date             &#10;2015-01-01      0&#10;2015-01-02      1&#10;2015-01-03      2&#10;2015-01-04      3&#10;>>> df = df.reset_index(['Date'])&#10;>>> df.set_index('count', inplace=True)&#10;>>> print df&#10;           Date&#10;count           &#10;0     2015-01-01&#10;1     2015-01-02&#10;2     2015-01-03&#10;3     2015-01-04&#10;&#10;",
      "index":11
   },
   {
      "chapter":"",
      "question":"What is the output of the following code?&#10;&#10;import pandas&#10;import numpy&#10;df = numpy.array([2, 3, 4, 5])&#10;print pandas.rolling_mean(df, window=2)",
      "A":" [nan 2 3 4]",
      "B":" [nan 2.5 3.5 4.5]",
      "C":" [2 2.5 3.25 4.125]",
      "D":" [1 2 3 4]",
      "answer":"B",
      "why":">>> import pandas&#10;>>> import numpy&#10;>>> df = numpy.array([2, 3, 4, 5])&#10;>>> print pandas.rolling_mean(df, window=2)&#10;[ nan 2.5 3.5 4.5]&#10;&#10;",
      "index":12
   },
   {
      "chapter":"",
      "question":"What is the output of this python code?&#10;&#10;Code:&#10;&#10;import numpy as np&#10;a = np.arange(5, 0, -1)&#10;print a[a < 3]&#10;",
      "A":" [0, 1, 2]",
      "B":" [5, 4, 3]",
      "C":" [False, False, False, True, True]",
      "D":" [2, 1]",
      "answer":"D",
      "why":">>> import numpy as np&#10;>>> a = np.arange(5, 0, -1)&#10;>>> print a[a < 3]&#10;[2 1]&#10;&#10;",
      "index":13
   },
   {
      "chapter":"",
      "question":"What line of code should be added to Section A, using pandas DataFrames, so that it produces the following output:&#10;&#10;Code:&#10;&#10;import pandas as pd&#10;df1 = pd.DataFrame([[10, 'w'],&#10;                   [20, 'x'],&#10;                   [30, 'y'],&#10;                   [40, 'z']],&#10;                 columns=['numbers', 'letters'],&#10;                 index=['a', 'b', 'c', 'd'])&#10;&#10;df2 = pd.DataFrame([[1.0, '#'],&#10;                   [2.0, '@'],&#10;                   [3.0, '%'],&#10;                   [4.0, '$']],&#10;                 columns=['floats', 'symbols'],&#10;                 index=['a', 'b', 'c', 'e'])&#10;&#10;# Section A&#10;&#10;Output:&#10;&#10;  numbers letters  floats symbols&#10;a       10       w       1       #&#10;b       20       x       2       @&#10;c       30       y       3       %&#10;d       40       z     NaN     NaN&#10;e      NaN     NaN       4       $&#10;",
      "A":" print df1.join(df2, how='right')",
      "B":" print df1.join(df2, how='inner')",
      "C":" print df1.join(df2, how='outer')",
      "D":" print df1.join(df2, how='left')",
      "answer":"C",
      "why":"import pandas as pd&#10;df1 = pd.DataFrame([[10, 'w'],&#10;                   [20, 'x'],&#10;                   [30, 'y'],&#10;                   [40, 'z']],&#10;                 columns=['numbers', 'letters'],&#10;                 index=['a', 'b', 'c', 'd'])&#10;&#10;df2 = pd.DataFrame([[1.0, '#'],&#10;                   [2.0, '@'],&#10;                   [3.0, '%'],&#10;                   [4.0, '$']],&#10;                 columns=['floats', 'symbols'],&#10;                 index=['a', 'b', 'c', 'e'])&#10;&#10;print df1.join(df2, how='outer')&#10;&#10;",
      "index":14
   },
   {
      "chapter":"",
      "question":"How should section A be filled so that the code causes the following output?&#10;&#10;Code:&#10;&#10;import numpy as np&#10;j=np.random.random([4,4])&#10;print j&#10;print A&#10;&#10;Output:&#10;&#10;[[ 0.77193745  0.65987068  0.07110931  0.34828411]&#10;[ 0.57139421  0.58080777  0.45935194  0.05061515]&#10;[ 0.01467635  0.84673314  0.78251514  0.96852681]&#10;[ 0.71871822  0.57120611  0.30561734  0.71769405]]&#10;[[ 0.45935194  0.05061515]&#10;[ 0.78251514  0.96852681]]&#10;",
      "A":"j[1:2,2:]",
      "B":"j[2:3,3:4]",
      "C":"j[1:3,2:]",
      "D":"j[2:,1:2]",
	  "answer":"C",
	  "why":"&#10;Python Script:&#10;&#10;>>> import numpy as np&#10;>>> j=np.random.random([4,4])&#10;>>> print j&#10;[[ 0.77193745  0.65987068  0.07110931  0.34828411]&#10;[ 0.57139421  0.58080777  0.45935194  0.05061515]&#10;[ 0.01467635  0.84673314  0.78251514  0.96852681]&#10;[ 0.71871822  0.57120611  0.30561734  0.71769405]]&#10;>>> print j[1:3,2:]&#10;[[ 0.45935194  0.05061515]&#10;[ 0.78251514  0.96852681]]&#10;&#10;",
      "index":15
   },
   {
      "chapter":"",
      "question":"What is the output of the variable \"value\"?&#10;&#10;import numpy as np&#10;a = np.random.randint(0,10,size=(3,3))&#10;print \"Matrix a is \",a&#10;value = np.mean(a.min(axis = 0))&#10;print \"Variable value is\", value&#10;&#10;OUTPUT&#10;======&#10;Matrix a is [[7 5 2]&#10;           [8 5 1]&#10;           [1 3 0]]",
      "A":" 1.0",
      "B":" [5.33333333  4.33333333  1.0]",
      "C":" 1.3333333",
      "D":" [4.66666667  4.66666667  1.33333333]",
	  "answer":"C",
      "why":"=================&#10;>>> import numpy as np&#10;>>> a = np.random.randint(0,10,size=(3,3))&#10;>>> print \"Matrix a is \",a&#10;Matrix a is [[7 5 2]&#10;           [8 5 1]&#10;           [1 3 0]]&#10;>>> value = np.mean(a.min(axis = 0))&#10;>>> print \"Variable value is\", value&#10;Variable value is 1.33333333333&#10;&#10;",
      "index":16
   },
   {
      "chapter":"",
      "question":"What is the output of the following python code?&#10;&#10;Code:&#10;&#10;import numpy as np&#10;ary = np.array([[[1, 2], [3, 4]], [[5, 6], [7,8]]])&#10;print ary[:, :, 0]&#10;&#10;Output of \"print ary\" is:&#10;[[[1 2]&#10; [3 4]]&#10;&#10;[[5 6]&#10; [7 8]]]",
      "A":"&#10;[[1 2]&#10;[3 4]]",
      "B":"&#10;[[1 2]&#10;[5 6]]",
      "C":"&#10;[[1 3]&#10;[5 7]]",
      "D":"&#10;[[1 5]&#10;[3 7]]",
	  "answer":"C",
      "why":">>> import numpy as np&#10;>>> ary = np.array([[[1, 2], [3, 4]], [[5, 6], [7,8]]])&#10;>>> print ary[:, :, 0]&#10;[[1 3]&#10;[5 7]]&#10;>>> print ary&#10;[[[1 2]&#10; [3 4]]&#10;&#10;[[5 6]&#10; [7 8]]]&#10;&#10;",
      "index":17
   },
   {
      "chapter":"",
      "question":"What is the output of the following code?&#10;&#10;Code:&#10;&#10;import numpy as np&#10;&#10;a = np.array([[1,2,3,4,5],&#10;             [6,7,8,9,10],&#10;             [11,12,13,14,15],&#10;             [16,17,18,19,20],&#10;             [21,22,23,24,25]])&#10;&#10;print a[:,1:5:2]",
      "A":" &#10;  [[ 1  3  5]&#10;   [ 6  8 10]&#10;   [11 13 15]&#10;   [16 18 20]&#10;   [21 23 25]]",
      "B":"&#10;  [[ 2  4]&#10;   [ 7  9]&#10;   [12 14]&#10;   [17 19]&#10;   [22 24]]",
      "C":"&#10;  [[ 1  2  3  4  5]&#10;   [11 12 13 14 15]&#10;   [21 22 23 24 25]]",
      "D":"&#10;   [[ 6  7  8  9 10]&#10;   [16 17 18 19 20]]",
      "answer":"B",
      "why":">>> import numpy as np&#10;>>> a = np.array([[1,2,3,4,5],&#10;                      [6,7,8,9,10],&#10;                      [11,12,13,14,15],&#10;                      [16,17,18,19,20],&#10;                      [21,22,23,24,25]])&#10;>>> print a&#10;[[ 2  4]&#10;[ 7  9]&#10;[12 14]&#10;[17 19]&#10;[22 24]]&#10;&#10;",
      "index":18
   },
   {
      "chapter":"",
      "question":"What is the output of the following code?&#10;&#10;import numpy as np&#10;a=np.ones((3,3))*2&#10;b=a.dot(a)&#10;print(a)&#10;print(b)",
      "A":"&#10;[[ 2.  2.  2.]&#10;[ 2.  2.  2.]&#10;[ 2.  2.  2.]]&#10;[[ 4.  4.  4.]&#10;[ 4.  4.  4.]&#10;[ 4.  4.  4.]]",
      "B":" &#10;[[ 2.  2.  2.]&#10;[ 2.  2.  2.]&#10;[ 2.  2.  2.]]&#10;[[ 12.  12.  12.]&#10;[ 12.  12.  12.]&#10;[ 12.  12.  12.]]",
      "C":"&#10;[[ 4.  4.  4.]&#10;[ 4.  4.  4.]&#10;[ 4.  4.  4.]]&#10;[[ 12.  12.  12.]&#10;[ 12.  12.  12.]&#10;[ 12.  12.  12.]]",
      "D":"&#10;[[ 2.  2.  2.]&#10;[ 2.  2.  2.]&#10;[ 2.  2.  2.]]&#10;[[ 8.  8.  8.]&#10;[ 8.  8.  8.]&#10;[ 8.  8.  8.]]",
      "answer":"B",
      "why":">>> import numpy as np&#10;>>> a=np.ones((3,3))*2&#10;>>> b=a.dot(a)&#10;>>> print(a)&#10;[[ 2.  2.  2.]&#10;[ 2.  2.  2.]&#10;[ 2.  2.  2.]]&#10;>>> print(b)&#10;[[ 12.  12.  12.]&#10;[ 12.  12.  12.]&#10;[ 12.  12.  12.]]&#10;&#10;",
      "index":19
   },
   {
      "chapter":"",
      "question":"You are given two data frames, df1 and df2, in the code below. They are joined together to form a third data frame. What is the output of the below code?&#10;&#10;Code:&#10;&#10;import pandas as pd&#10;&#10;df1 = pd.DataFrame( {'var1': [1,2,3,4,5], 'var2': [11,12,13,14,15]}, index = ['cat','dog', 'bird', 'fish', 'turtle'] )&#10;df2 = pd.DataFrame( {'var3': [101,102,103,104,105]}, index = ['dog', 'bird', 'cat', 'turtle', 'fish'] )&#10;df3 = df1.join(df2)&#10;print df3.ix['bird','var2']&#10;",
      "A":" [11, 12, 13, 14, 15]",
      "B":" [3, 13, 102]",
      "C":" 13",
      "D":" 102",
      "answer":"C",
      "why":">>> import pandas as pd&#10;&#10;>>> df1 = pd.DataFrame( {'var1': [1,2,3,4,5], 'var2': [11,12,13,14,15]}, index = ['cat','dog', 'bird', 'fish', 'turtle'] )&#10;>>> df2 = pd.DataFrame( {'var3': [101,102,103,104,105]}, index = ['dog', 'bird', 'cat', 'turtle', 'fish'] )&#10;>>> df3 = df1.join(df2)&#10;>>> print df3.ix['bird','var2']&#10;13&#10;&#10;",
      "index":20
   },
   {
      "chapter":"",
      "question":"How would section _A_ be filled to complete code that will address any gaps in the data (missing cells) after reindexing a data frame and produce the following output:&#10;&#10;Code:&#10;&#10;import pandas as pd&#10;import numpy as np&#10;df = pd.DataFrame(np.random.randn(5, 3), index=['2013-01-02', '2013-01-03', '2013-01-04', '2013-01-05', '2013-01-08'], columns=['a', 'b', 'c'])&#10;df = df.reindex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04', '2013-01-05','2013-01-07', '2013-01-08', '2013-01-09'])&#10;print df&#10;_A_&#10;print df&#10;&#10;Output:&#10;&#10;                  a         b         c&#10;2013-01-01       NaN       NaN       NaN&#10;2013-01-02  0.490073  0.132083 -0.404633&#10;2013-01-03  0.972129  0.596112 -0.744198&#10;2013-01-04 -0.650304  0.299980  0.093164&#10;2013-01-05 -1.049114 -0.212860  0.698289&#10;2013-01-07       NaN       NaN       NaN&#10;2013-01-08  0.671206 -0.611449 -0.215637&#10;2013-01-09       NaN       NaN       NaN&#10;&#10;                  a         b         c&#10;2013-01-01  0.490073  0.132083 -0.404633&#10;2013-01-02  0.490073  0.132083 -0.404633&#10;2013-01-03  0.972129  0.596112 -0.744198&#10;2013-01-04 -0.650304  0.299980  0.093164&#10;2013-01-05 -1.049114 -0.212860  0.698289&#10;2013-01-07 -1.049114 -0.212860  0.698289&#10;2013-01-08  0.671206 -0.611449 -0.215637&#10;2013-01-09  0.671206 -0.611449 -0.215637&#10;",
      "A":"         df.fillna(method='ffill', inplace=True)",
      "B":"         df.fillna(method='bfill', inplace=True)",
      "C":"        a followed by b",
      "D":"        b followed by a",
      "answer":"C",
      "why":">>> import pandas as pd&#10;>>> import numpy as np&#10;>>> df = pd.DataFrame(np.random.randn(5, 3), index=['2013-01-02', '2013-01-03', '2013-01-04', '2013-01-05', '2013-01-08'], columns=['a', 'b', 'c'])&#10;>>> df=df.reindex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04', '2013-01-05','2013-01-07', '2013-01-08', '2013-01-09'])&#10;>>> print df&#10;                  a         b         c&#10;2013-01-01       NaN       NaN       NaN&#10;2013-01-02  0.490073  0.132083 -0.404633&#10;2013-01-03  0.972129  0.596112 -0.744198&#10;2013-01-04 -0.650304  0.299980  0.093164&#10;2013-01-05 -1.049114 -0.212860  0.698289&#10;2013-01-07       NaN       NaN       NaN&#10;2013-01-08  0.671206 -0.611449 -0.215637&#10;2013-01-09       NaN       NaN       NaN&#10;>>> df.fillna(method='ffill', inplace=True)&#10;>>> df.fillna(method='bfill', inplace=True)&#10;>>> print df&#10;                  a         b         c&#10;2013-01-01  0.490073  0.132083 -0.404633&#10;2013-01-02  0.490073  0.132083 -0.404633&#10;2013-01-03  0.972129  0.596112 -0.744198&#10;2013-01-04 -0.650304  0.299980  0.093164&#10;2013-01-05 -1.049114 -0.212860  0.698289&#10;2013-01-07 -1.049114 -0.212860  0.698289&#10;2013-01-08  0.671206 -0.611449 -0.215637&#10;2013-01-09  0.671206 -0.611449 -0.215637&#10;&#10;",
      "index":21
   },
   {
      "chapter":"",
      "question":"What is the output of this code?&#10;&#10;Code:&#10;&#10;import numpy as np&#10;&#10;k= np.array([[2, 4, 8, 16], [16.0, 8.0, 4.0, 2.0]])&#10;&#10;print k[1,2:-1]/k[-2,-2]&#10;",
      "A":" [ 1.0]",
      "B":" [ 2.0]",
      "C":" [ 0.25]",
      "D":" [ 0.5]",
      "answer":"D",
      "why":">>> import numpy as np&#10;&#10;>>> k= np.array([[2, 4, 8, 16], [16.0, 8.0, 4.0, 2.0]])&#10;&#10;>>> print k[1,3] / k[-2,-3]&#10;&#10;[ 0.5]&#10;&#10;",
      "index":22
   },
   {
      "chapter":"",
      "question":"What is the output of this Python code?&#10;&#10;Code:&#10;&#10;import numpy as np&#10;&#10;j = np.array([(1,2,3),(4,5,6),(7,8,9)])&#10;&#10;k = j[:,-1:]&#10;&#10;print k.shape&#10;",
      "A":" 3",
      "B":" (3, 1)",
      "C":" (1, 3)",
      "D":" [3 6 9]",
      "answer":"B",
      "why":">>> import numpy as np&#10;&#10;>>> j = np.array([(1,2,3),(4,5,6),(7,8,9)])&#10;&#10;>>> k = j[:,-1:]&#10;&#10;>>> print k.shape&#10;&#10;(3, 1)&#10;&#10;",
      "index":23
   },
   {
      "chapter":"",
      "question":"What does the following code output?&#10;&#10;Code:&#10;&#10;import numpy as np&#10;&#10;syms=['GOOG','AAPL','GLD','XOM']&#10;&#10;num_syms = len(syms)&#10;&#10;allocs = [1.0 / num_syms] * num_syms&#10;&#10;print allocs&#10;&#10;Select the answer which the above code will output:",
      "A":" [0.25, 0.25, 0.25, 0.25]",
      "B":" [1.0]",
      "C":" 1.0",
      "D":" TypeError: unsupported operand type(s) for /: 'list' and 'float'",
      "answer":"A",
      "why":">>> import numpy as np&#10;&#10;>>> syms=['GOOG','AAPL','GLD','XOM']&#10;&#10;>>> num_syms = len(syms)&#10;&#10;>>> allocs = [1.0 / num_syms] * num_syms&#10;&#10;>>> print allocs&#10;&#10;[0.25, 0.25, 0.25, 0.25]&#10;&#10;",
      "index":24
   },
   {
      "chapter":"",
      "question":"What is the output of this python code?&#10;&#10;Code:&#10;&#10;    import pandas as pd&#10;&#10;    df1 = pd.DataFrame({'Type': [\"Stock\", None]})&#10;&#10;    df2 = df1&#10;&#10;    df1.fillna(\"Mutual Fund\", inplace=True)&#10;&#10;    df2.fillna(\"ETF\")&#10;&#10;    print df1&#10;&#10;    print df2&#10;",
      "A":"&#10;          Type&#10;0        Stock&#10;1         None&#10;          Type&#10;0        Stock&#10;1          ETF",
      "B":"&#10;          Type&#10;0        Stock&#10;1  Mutual Fund&#10;          Type&#10;0        Stock&#10;1          ETF",
      "C":"&#10;          Type&#10;0        Stock&#10;1  Mutual Fund&#10;          Type&#10;0        Stock&#10;1         None",
      "D":"&#10;          Type&#10;0        Stock&#10;1  Mutual Fund&#10;          Type&#10;0        Stock&#10;1  Mutual Fund",
      "answer":"D",
      "why":"Python 2.7.11 |Anaconda 2.4.1 (64-bit)| (default, Jan 29 2016, 14:26:21) [MSC v.1500 64 bit (AMD64)] on win32&#10;&#10;In[3]:     import pandas as pd&#10;&#10;    df1 = pd.DataFrame({'Type': [\"Stock\", None]})&#10;    df2 = df1&#10;    df1.fillna(\"Mutual Fund\", inplace=True)&#10;    df2.fillna(\"ETF\")&#10;    print df1&#10;    print df2&#10;&#10;Backend Qt4Agg is interactive backend. Turning interactive mode on.&#10;&#10;          Type&#10;0        Stock&#10;1  Mutual Fund&#10;          Type&#10;0        Stock&#10;1  Mutual Fund&#10;",
      "index":25
   },
   {
      "chapter":"",
      "question":"What is the output of the following code?&#10;&#10;import pandas as pd&#10;import numpy as np&#10;array0 = np.array([3,2,5,2,1])&#10;df = pd.DataFrame(array0, columns=['numbers'], index=['a','b','c','d','e'])&#10;df = df.ix[df.index[2:5]].sum()&#10;dr = df**2&#10;print  df&#10;",
      "A":" 64",
      "B":" numbers 8",
      "C":" 8",
      "D":" 9",
      "answer":"B",
      "why":">>> import pandas as pd&#10;>>> import numpy as np&#10;>>> array0 = np.array([3,2,5,2,1])&#10;>>> df = pd.DataFrame(array0, columns=['numbers'], index=['a','b','c','d','e'])&#10;>>> df = df.ix[df.index[2:5]].sum()&#10;>>> dr = df**2&#10;>>> print df&#10;numbers 8",
      "index":26
   },
   {
      "chapter":"",
      "question":"What is the output of the following code?&#10;&#10;Given a CSV file that contains the following data:&#10;&#10;Name,Value,Company,Founded&#10;&#10;George Soros,4000000000,Soros Fund Management,1969&#10;&#10;Tucker Balch,1000000000000,Lucena Research,&#10;&#10;import pandas as pd&#10;&#10;df = pd.read_csv('top_hedgefund_managers.csv', index_col=\"Company\").sort(columns='Value', ascending=False).fillna('TBD')&#10;&#10;print(df)&#10;",
      "A":"&#10;&#10;                               Name          Value Founded&#10;&#10;Company&#10;&#10;Lucena Research        Tucker Balch  1000000000000     TBD&#10;&#10;Soros Fund Management  George Soros     4000000000    1969",
      "B":"&#10;&#10;                               Name          Value Founded&#10;&#10;Company&#10;&#10;Soros Fund Management  George Soros     4000000000    1969&#10;&#10;Lucena Research        Tucker Balch  1000000000000     TBD",
      "C":"&#10;&#10;                               Name          Value  Founded&#10;&#10;Company&#10;&#10;Lucena Research        Tucker Balch  1000000000000      NaN&#10;&#10;Soros Fund Management  George Soros     4000000000     1969",
      "D":"&#10;&#10;                      Value                Company Founded&#10;&#10;Name&#10;&#10;Tucker Balch  1000000000000        Lucena Research     TBD&#10;&#10;George Soros     4000000000  Soros Fund Management    1969",
      "answer":"A",
      "why":">>> import pandas as pd&#10;&#10;>>> data = '''&#10;&#10;... Name,Value,Company,Founded&#10;&#10;... George Soros,4000000000,Soros Fund Management,1969&#10;&#10;... Tucker Balch,1000000000000,Lucena Research,&#10;&#10;... '''&#10;&#10;>>> fp = open(\"top_hedgefund_managers.csv\", 'w')&#10;&#10;>>> fp.write(data)&#10;&#10;>>> fp.close()&#10;&#10;>>> df = pd.read_csv('top_hedgefund_managers.csv', index_col=\"Company\").sort(columns='Value', ascending=False).fillna('TBD')&#10;&#10;>>> print(df)&#10;&#10;                               Name          Value Founded&#10;&#10;Company&#10;&#10;Lucena Research        Tucker Balch  1000000000000     TBD&#10;&#10;Soros Fund Management  George Soros     4000000000    1969",
      "index":27
   },
   {
      "chapter":"",
      "question":"What is the output of the following code snippet?&#10;Code:&#10;&#10;import numpy as np&#10;&#10;m = np.array([[1, 3, 5], [2, 4, 6]])&#10;&#10;n = np.array([[1, 2, 3], [1, 2, 3]])&#10;&#10;print m.sum(axis=0)+n.mean(axis=0)&#10;",
      "A":" [ 5, 11, 17]",
      "B":" 33",
      "C":" [ 11.,  14.]",
      "D":" [  4.,   9.,  14.]",
      "answer":"D",
      "why":">>> import numpy as np&#10;&#10;>>> m = np.array([[1, 3, 5], [2, 4, 6]])&#10;&#10;>>> n = np.array([[1, 2, 3], [1, 2, 3]])&#10;&#10;>>> print m.sum(axis=0)+n.mean(axis=0)&#10;&#10;[  4.   9.  14.]&#10;&#10;",
      "index":28
   },
   {
      "chapter":"",
      "question":"What is the output of the following python codes?&#10;&#10;Codes:&#10;&#10;import numpy as np&#10;&#10;a = np.array([1,2,3,4,5])&#10;&#10;print a * a[::-1]&#10;",
      "A":" [5 8 9 8 8]",
      "B":" [5 8 8 8 5]",
      "C":" [5 8 9 8 5]",
      "D":" [5 9 9 8 5]",
      "answer":"C",
      "why":">>> import numpy as np&#10;&#10;>>> a = np.array([1,2,3,4,5])&#10;&#10;>>> print a * a[::-1]&#10;&#10;[5 8 9 8 5]&#10;&#10;",
      "index":29
   },
   {
      "chapter":"",
      "question":"What is the output of this Python code?&#10;Code:&#10;        import pandas as pd&#10;        data = {'A': [100, 60, 30, 130],&#10;                 'B': [5, 15, 15, 5],&#10;                 'C': [100, 300, 100, 200],&#10;                 'D': [20, 20, 30, 30]}&#10;                 &#10;        df = pd.DataFrame(data)&#10;        # print df&#10;        #     A   B    C   D&#10;        #0  100   5  100  20&#10;        #1   60  15  300  20&#10;        #2   30  15  100  30&#10;        #3  130   5  200  30&#10;        df = df.shift(2)&#10;        print df.mean()&#10;",
      "A":"&#10;        A     40&#10;        B      5&#10;        C    100&#10;        D     10",
      "B":"&#10;        A     80&#10;        B     10&#10;        C    200&#10;        D     20",
      "C":"&#10;        A     80&#10;        B     10&#10;        C    175&#10;        D     25",
      "D":"&#10;        A    NaN&#10;        B    NaN&#10;        C    NaN&#10;        D    NaN",
      "answer":" b",
      "why":">>> import pandas as pd&#10;>>> data = {'A': [100, 60, 30, 130],&#10;>>>          'B': [5, 15, 15, 5],&#10;>>>          'C': [100, 300, 100, 200],&#10;>>>          'D': [20, 20, 30, 30]}&#10;>>> df = pd.DataFrame(data)&#10;>>> # print df&#10;>>> #     A   B    C   D&#10;>>> #0  100   5  100  20&#10;>>> #1   60  15  300  20&#10;>>> #2   30  15  100  30&#10;>>> #3  130   5  200  30&#10;>>> df = df.shift(2)&#10;>>> print df.mean()&#10;A     80&#10;B     10&#10;C    200&#10;D     20&#10;dtype: float64&#10;",
      "index":30
   },
   {
      "chapter":"",
      "question":"What will be the output of the following code:&#10;&#10;a = [[]]*4&#10;&#10;a[0].append(15)&#10;&#10;print a&#10;",
      "A":" [[[15]], [[]], [[]], [[]]]",
      "B":" [[15], [15], [15], [15]]",
      "C":" [[15], [], [], []]",
      "D":" [[[15]], [[15]], [[15]], [[15]]]",
	  "answer":"B",
      "why":">>> a = [[]]*4&#10;>>> a[0].append(15)&#10;>>> print a&#10;[[15], [15], [15], [15]]&#10;",
      "index":31
   },
   {
      "chapter":"",
      "question":"How should section A be filled in to complete code that will cause the following output:&#10;Code:&#10;&#10;import pandas as pd&#10;&#10;df = pd.DataFrame({&#10;    \"A\": [1, 2]&#10;    \"B\": [3, 4]&#10;})&#10;&#10;print df&#10;print __A__&#10;print df&#10;&#10;Output:&#10;&#10;   A  B&#10;0  1  3&#10;1  2  4&#10;   A&#10;0  1&#10;1  2&#10;   A  B&#10;0  1  3&#10;1  2  4&#10;",
      "A":" df.drop(\"B\", inplace=True)",
      "B":" df.drop(\"B\", axis=0)",
      "C":" df.drop(\"B\", axis=1)",
      "D":" df.drop(\"B\", axis=1, inplace=True)",
      "answer":"C",
      "why":">>> import pandas as pd&#10;>>> df = pd.DataFrame({&#10;        \"A\": [1, 2],&#10;        \"B\": [3, 4]&#10;    })&#10;>>> print df&#10;   A  B&#10;0  1  3&#10;1  2  4&#10;>>> print df.drop(\"B\", axis=1)&#10;   A&#10;0  1&#10;1  2&#10;>>> print df&#10;   A  B&#10;0  1  3&#10;1  2  4&#10;",
      "index":32
   },
   {
      "chapter":"",
      "question":"Fill the blank __A__ below to cause this Python code to give the following output:&#10;Code:&#10;import pandas as pd&#10;i= [1,2,3,4,5,6]&#10;d = [2,2.5,2.99,3.5,3.8,10]&#10;df = pd.DataFrame(index=i, data=d)&#10;print __A__&#10;Output:&#10;          0&#10;1       NaN&#10;2  0.250000&#10;3  0.196000&#10;4  0.170569&#10;5  0.085714&#10;6  1.631579&#10;",
      "A":" df/df.shift(1) - 1",
      "B":" df/(df-1)",
      "C":" df/df.shift(1)",
      "D":" df*(df-1)",
      "answer":"A",
      "why":">>> import pandas as pd&#10;>>> i= [1,2,3,4,5,6]&#10;>>> d = [2,2.5,2.99,3.5,3.8,10]&#10;>>> df = pd.DataFrame(index=i, data=d)&#10;>>> print df/df.shift(1) - 1&#10;          0&#10;1       NaN&#10;2  0.250000&#10;3  0.196000&#10;4  0.170569&#10;5  0.085714&#10;6  1.631579&#10;",
      "index":33
   },
   {
      "chapter":"",
      "question":"What is the output of the following python code?&#10;import numpy as np&#10;x = np.array([[0,1,2],[3,4,5],[4,3,2]])&#10;x = x**2&#10;print x[-1] * x[1]&#10;A)[144 144 100]",
      "B":"[0 4 10]",
      "C":"[0 16 100]",
      "D":"[48 48 40]",
	  "answer":"A",
	  "why":"Transcript:&#10;>>> import numpy as np&#10;>>> x = np.array([[0,1,2],[3,4,5],[4,3,2]])&#10;>>> x = x**2&#10;>>> print x[-1] * x[1]&#10;[144 144 100]&#10;",
      "index":34
   },
   {
      "chapter":"",
      "question":"What is the output of the following code:&#10;Code:&#10;import numpy as np&#10;import pandas as pd&#10;s = pd.DataFrame([0, 1, 2, np.nan])&#10;print s.size, s.count()",
      "A":" 3 0    3",
      "B":" 3 0    4",
      "C":" 4 0    3",
      "D":" 4 0    4",
      "answer":"C",
      "why":">>> import numpy as np&#10;>>> import pandas as pd&#10;>>> s = pd.DataFrame([0, 1, 2, np.nan])&#10;>>> print s.size, s.count()&#10;4 0    3&#10;dtype: int64&#10;",
      "index":35
   },
   {
      "chapter":"",
      "question":"What is the output of the following python code:&#10;Code:&#10;import numpy as np&#10;import pandas as pd&#10;df = pd.DataFrame(np.array([(1,2),(3,4),(5,6)]),index=['a','c','e'],columns=['data1','data2'])&#10;df = df.reindex(['a','b','c','d','e'])&#10;df = df.fillna(method='ffill')&#10;df = df.sum(axis=1)&#10;print df",
      "A":"&#10;data1    13&#10;data2    18&#10;dtype: float64",
      "B":"&#10;a     3&#10;b     3&#10;c     7&#10;d     7&#10;e    11&#10;dtype: float64",
      "C":"&#10;data1    17&#10;data2    22&#10;dtype: float64",
      "D":"&#10;a     3&#10;b     7&#10;c     7&#10;d    11&#10;e    11&#10;dtype: float64",
      "answer":"B",
      "why":">>> import numpy as np&#10;>>> import pandas as pd&#10;>>> df = pd.DataFrame(np.array([(1,2),(3,4),(5,6)]),index=['a','c','e'],columns=['data1','data2'])&#10;>>> df = df.reindex(['a','b','c','d','e'])&#10;>>> df = df.fillna(method='ffill')&#10;>>> df = df.sum(axis=1)&#10;>>> print df&#10;a     3&#10;b     3&#10;c     7&#10;d     7&#10;e    11&#10;dtype: float64&#10;",
      "index":36
   },
   {
      "chapter":"",
      "question":"What is the output of the following Python code?&#10;Code:&#10;import numpy as np&#10;import pandas as pd&#10;arr = np.ones([1,5])&#10;df = pd.DataFrame(arr)&#10;df.ix[:,2:3] = 0&#10;print df.values",
      "A":" [1, 1, 0, 1, 1]",
      "B":" [1, 1, 0, 0, 1]",
      "C":" [1, 1, 1, 1, 1]",
      "D":" [0, 0, 0, 0, 0]",
      "answer":"B",
      "why":">>> import numpy as np&#10;>>> import pandas as pd&#10;>>> arr = np.ones([1,5])&#10;>>> df = pd.DataFrame(arr)&#10;>>> df.ix[:,2:3] = 0&#10;>>> print df.values&#10;[[ 1.  1.  0.  0.  1.]]&#10;",
      "index":37
   },
   {
      "chapter":"",
      "question":"How should section A be filled in to complete code that will cause the following output:&#10;Code:&#10;import numpy as np&#10;m = np.arange(20).reshape(4,5)&#10;print m&#10;print m.__A__&#10;Output:&#10;[[ 0  1  2  3  4]&#10; [ 5  6  7  8  9]&#10; [10 11 12 13 14]&#10; [15 16 17 18 19]]&#10;[[ 0  1  3  6 10]&#10; [ 5 11 18 26 35]&#10; [10 21 33 46 60]&#10; [15 31 48 66 85]]",
      "A":" m.sum(axis=0)",
      "B":" m.sum(axis=1)",
      "C":" m.cumsum(axis=0)",
      "D":" m.cumsum(axis=1)",
      "answer":"D",
      "why":">>> import numpy as np&#10;>>> m = np.arange(20).reshape(4,5)&#10;>>> print m&#10;[[ 0  1  2  3  4]&#10; [ 5  6  7  8  9]&#10; [10 11 12 13 14]&#10; [15 16 17 18 19]]&#10;>>> print m.cumsum(axis=1)&#10;[[ 0  1  3  6 10]&#10; [ 5 11 18 26 35]&#10; [10 21 33 46 60]&#10; [15 31 48 66 85]]&#10;",
      "index":38
   },
   {
      "chapter":"",
      "question":"What is the output of the following code:&#10;Code:&#10;import pandas&#10;import numpy&#10;df = numpy.array([25,4,78,54,6,21,45,2])&#10;print pandas.rolling_max(df,window=2,min_periods=2)&#10;Output:",
      "A":"[ nan  78.  78.  78.  54.  21.  45.  45.]",
      "B":"[ nan  nan  25.  78.  78.  54.  21.  45.]",
      "C":"[ nan  6.   25.  78.  54.  21.  45.  45.]",
      "D":"[ nan  25.  78.  78.  54.  21.  45.  45.]",
	  "answer":"D",
      "why":">>> import pandas&#10;>>> import numpy&#10;>>> df = numpy.array([25,4,78,54,6,21,45,2])&#10;>>> print pandas.rolling_max(df,window=2,min_periods=2)&#10;[ nan  25.  78.  78.  54.  21.  45.  45.]",
      "index":39
   },
   {
      "chapter":"",
      "question":"What is the output of the following code?&#10;Code:&#10;import numpy as np&#10;A = np.zeros((4,4), dtype=int)&#10;A[1::2, ::2] = 1&#10;A[::2, 1::2] = 1&#10;print(A)",
      "A":"&#10;   [[1 0 1 0]&#10;    [0 1 0 1]&#10;    [1 0 1 0]&#10;    [0 1 0 1]]",
      "B":"&#10;   [[0 1 0 1]&#10;    [1 0 1 0]&#10;    [0 1 0 1]&#10;    [1 0 1 0]]",
      "C":"&#10;   [[0 1 0 0]&#10;    [1 1 0 0]&#10;    [0 0 0 0]&#10;    [0 0 0 0]]",
      "D":" None of the above",
      "answer":"B",
      "why":">>> import numpy as np&#10;>>> A = np.zeros((4,4),dtype=int)&#10;>>> A[1::2, ::2] = 1&#10;>>> A[::2,1::2] = 1&#10;>>> print(A)&#10;[[0 1 0 1]&#10; [1 0 1 0]&#10; [0 1 0 1]&#10; [1 0 1 0]]&#10;",
      "index":40
   },
   {
      "chapter":"",
      "question":"What statement in place of _A_ would cause the following output:&#10;Code:&#10;import numpy as np&#10;x = np.random.randint(5, size=(4, 5))&#10;print x&#10;_A_&#10;print x&#10;Output:&#10;[[4 2 3 4 1]&#10; [2 2 1 0 1]&#10; [2 1 0 3 4]&#10; [3 2 1 1 3]]&#10; &#10;[[  4   2   3   4   1]&#10; [777   2 777   0 777]&#10; [  2   1   0   3   4]&#10; [  3   2   1   1   3]]",
      "A":" x[1][2::] = 777",
      "B":" x[1:3:5] = 777",
      "C":" x[1::3] = 777",
      "D":" x[1][::2] = 777",
      "answer":"D",
      "why":" &#10;>>> import numpy as np&#10;>>> x = np.random.randint(5, size=(4, 5))&#10;>>> print x&#10;[[0 1 2 0 1]&#10; [3 4 3 2 0]&#10; [1 0 1 1 1]&#10; [0 0 2 0 1]]&#10;>>> x[1][::2] = 777&#10;>>> print x&#10;[[  0   1   2   0   1]&#10; [777   4 777   2 777]&#10; [  1   0   1   1   1]&#10; [  0   0   2   0   1]]&#10;",
      "index":41
   },
   {
      "chapter":"",
      "question":"red = np.array([[3,4],[2,4]])&#10;x = ([2,5],[2,3])&#10;x = np.asarray(x)&#10;blue = red * x[-2,:]&#10;print blue",
      "A":"[[3 4]&#10;  [2 4]]",
      "B":"[[ 6 20]&#10;  [ 4 20]]",
      "C":"[[2 5]&#10;  [2 3]]",
      "D":"[[6 8]&#10;  [4 8]]",
	  "answer":"B",
      "why":">>> import numpy as np&#10;>>> red = np.array([[3,4],[2,4]])&#10;>>> x = ([2,5],[2,3])&#10;>>> x = np.asarray(x)&#10;>>> blue = red * x[-2,:]&#10;>>> print blue&#10;[[ 6 20]&#10; [ 4 20]]&#10;",
      "index":42
   },
   {
      "chapter":"",
      "question":"What is the output of this python code?&#10;Code:&#10;import numpy as np&#10;arr = np.array([[1,2,5],[2,4,2],[3,3,2]])&#10;x = arr[:,1].sum(),arr[0:].sum().sum(axis=0)&#10;print x",
      "A":" (9,24)",
      "B":" (9,8)",
      "C":" (8,24)",
      "D":" 33",
      "answer":"A",
      "why":">>> import numpy as np&#10;>>> arr = np.array([[1,2,5],[2,4,2],[3,3,2]])&#10;>>> x = arr[:,1].sum(),arr[0:].sum().sum(axis=0)&#10;>>> print x&#10;(9, 24)&#10;",
      "index":43
   },
   {
      "chapter":"",
      "question":"How should section A be filled in to complete code that will cause the following output:&#10;Code:&#10;import numpy as np&#10;x = np.array([[0, 1, 2, 3, 4],\\&#10;                          [5, 6, 7, 8, 9],\\&#10;                          [10, 11, 12, 13, 14]])&#10;print x&#10;print _A_&#10;Output:&#10;[[ 0  1  2  3  4]&#10; [ 5  6  7  8  9]&#10; [10 11 12 13 14]]&#10; [[3]&#10; [8]]",
      "A":" x[:2,4]",
      "B":" x[3:4,0:2]",
      "C":" x[2,3]",
      "D":" x[0:2,3:4]",
      "answer":"D",
      "why":">>> import numpy as np&#10;>>> x = np.array([[0, 1, 2, 3, 4],\\&#10;... [5, 6, 7, 8, 9],\\&#10;... [10, 11, 12, 13, 14]])&#10;>>> print x&#10;[[ 0  1  2  3  4]&#10; [ 5  6  7  8  9]&#10; [10 11 12 13 14]]&#10;>>> print x[0:2,3:4]&#10;[[3]&#10; [8]]&#10;",
      "index":44
   },
   {
      "chapter":"",
      "question":"What is the output of this Python code?&#10;Code:&#10;import numpy as np&#10;j = np.array([(1,2,3),(4,5,6),(7,8,9)])&#10;k = j[:,-1:]&#10;print k.shape",
      "A":" 3",
      "B":" (3, 1)",
      "C":" (1, 3)",
      "D":" [3 6 9]",
      "answer":"B",
      "why":">>> import numpy as np&#10;>>> j = np.array([(1,2,3),(4,5,6),(7,8,9)])&#10;>>> k = j[:,-1:]&#10;>>> print k.shape&#10;(3, 1)&#10;",
      "index":45
   },
   {
      "chapter":"",
      "question":"What is the output of the following code?&#10;>>>import numpy as np&#10;>>>a=np.random.randint(0,10,size=(5,4))&#10;>>>print 'a=\n',a&#10; a=&#10; [[4 1 6 9]&#10;  [4 9 2 5]&#10;  [7 0 9 7]&#10;  [6 1 9 5]&#10;  [6 6 3 9]]&#10;what is the output of the following code?&#10;print a[1:3,1:2].sum()",
      "A":" 25",
      "B":" 26",
      "C":" 11",
      "D":" 9",
	  "answer":"D",
      "why":">>>import numpy as np&#10;>>>a=np.random.randint(0,10,size=(5,4))&#10;>>>print 'a=\n',a&#10;  a=&#10;   [[4 1 6 9]&#10;    [4 9 2 5]&#10;    [7 0 9 7]&#10;    [6 1 9 5]&#10;    [6 6 3 9]]&#10;>>>print a[1:3,1:2]&#10;   [[9]&#10;    [0]]&#10;",
      "index":46
   },
   {
      "chapter":"",
      "question":"What is the output of the following python code?&#10;Code:&#10;import pandas as pd&#10;data = { 'key': [ 'B','D','C','A' ], 'value': [ 1,2,3,4 ]}&#10;sub = pd.DataFrame.from_dict( data ).sort( columns=[ 'key' ]).ix[ 0:1 ]&#10;print sub.value.mean()",
      "A":" 1.5",
      "B":" 2.0",
      "C":" 2.5",
      "D":" 3.0",
      "answer":"B",
      "why":">>> import pandas as pd                                                            &#10;>>> data = { 'key': [ 'B','D','C','A' ], 'value': [ 1,2,3,4 ]}                      &#10;>>> sub = pd.DataFrame.from_dict( data ).sort( columns=[ 'key' ]).ix[ 0:1 ]&#10;>>> print sub.value.mean()&#10;2.0&#10;",
      "index":47
   },
   {
      "chapter":"",
      "question":"How should section A be filled in to complete code that will cause the following output:&#10;(Select all the values bigger than 10 from the second column)&#10;Code:&#10;import numpy as np&#10;r = np.random.randint(20, size=(4, 6))&#10;print r&#10;print _A_&#10;Output:&#10;[[18 15 12 12 17  7]&#10; [18  6  9 16  5  2]&#10; [ 9 18 11 10  6 18]&#10; [12  8 19 19  4 16]]&#10;[[15 18]]",
      "A":" r[np.where(r[:,0]>10),0]",
      "B":" r[np.where(r[:,1]>10),1]",
      "C":" r[1,np.where(r[:,1]>10)]",
      "D":" r[0,np.where(r[:,0]>10)]",
      "answer":"B",
      "why":">>> import numpy as np&#10;>>> r = np.random.randint(20, size=(4, 6))&#10;>>> print r&#10;[[18 15 12 12 17  7]&#10; [18  6  9 16  5  2]&#10; [ 9 18 11 10  6 18]&#10; [12  8 19 19  4 16]]&#10;>>> print r[np.where(r[:,1]>10),1]&#10;[[15 18]]&#10;>>>&#10;",
      "index":48
   },
   {
      "chapter":"",
      "question":"What is the output of this Python code?&#10;import numpy as np&#10;x = np.array([8,1,3,4,5,2,1,9,6,4,7])&#10;print(np.mean(x[2:7][::-1][:-1]))",
      "A":" 5",
      "B":" 3",
      "C":" 5.0",
      "D":" 3.0",
	  "answer":"D",
	  "why":">>> import numpy as np&#10;>>> x = np.array([8,1,3,4,5,2,1,9,6,4,7])&#10;>>> print(np.mean(x[2:7][::-1][:-1]))&#10;3.0&#10;",
      "index":49
   },
   {
      "chapter":"",
      "question":"What is the output of the following python code?&#10;Code:&#10;import numpy as np&#10;a = np.array([2, 7, 11, 9, 3])&#10;a[a < 5] = 5&#10;a[2] = 10&#10;print a",
      "A":" [ 2  5 10  5  3]",
      "B":" [ 5  7 10  5  3]",
      "C":" [ 5  7 10  9  5]",
      "D":" [ 5 10 11  9  5]",
      "answer":"C",
      "why":">>> import numpy as np&#10;>>> a = np.array([2, 7, 11, 9, 3])&#10;>>> a[a < 5] = 5&#10;>>> a[2] = 10&#10;>>> print a&#10;[ 5  7 10  9  5]&#10;",
      "index":50
   },
   {
      "chapter":"",
      "question":"Given a pandas data frame df, which block of statements will label the x and y axes in the resultant plot?",
	  "A":"df.plot(title='P Values', fontsize=12, x-axis='Date', y-axis='P Value')&#10;        plt.show()",
      "B":"df.plot(title='P Values', fontsize=12)&#10;        df.xaxis = 'Date'&#10;        df.yaxis = 'P Value'&#10;        plt.show()",
      "C":"ax = df.plot(title='P Values', fontsize=12)&#10;        ax.set_xlabel('Date')&#10;        ax.set_ylabel('P Value')&#10;        plt.show()",
      "D":"df.plot(title='P Values', fontsize=12, xlabel='Date', ylabel='P Value')&#10;        plt.show()",
      "answer":"C",
      "why":">>> import pandas as pd&#10;>>> import numpy as np&#10;>>> import matplotlib.pyplot as plt&#10;>>> dates = pd.date_range('2010-01-01', periods=8)&#10;>>> df = pd.DataFrame(np.random.randn(8, 1), index=dates, columns=list('P'))&#10;>>> ax = df.plot(title='P Values', fontsize=12)&#10;>>> ax.set_xlabel('Date')&#10;<matplotlib.text.Text object at 0x7f710cb12cd0>&#10;>>> ax.set_ylabel('P Value')&#10;<matplotlib.text.Text object at 0x7f70f52dec50>&#10;>>> plt.show()&#10;",
      "index":51
   },
   {
      "chapter":"",
      "question":"Which is NOT an example of code to replace section _A_ that can calculate the difference between neighboring rows in an ndarray (as illustrated by the output)?&#10;import pandas as pd&#10;a = pd.Series([1, 2, 4, 7, 11, 16])&#10;_A_&#10;print a&#10;print b.values[-1]*1.0&#10;Output:&#10;0     1&#10;1     2&#10;2     4&#10;3     7&#10;4    11&#10;5    16&#10;dtype: int64&#10;5.0"
,
      "A":"b = a-a.shift(1)&#10;b=b[1:]",
      "B":"b=pd.Series([])&#10;for i in range(len(a)-1):&#10;    b[i] = a[i+1] - a[i]",
      "C":"b = a-a.shift(1)",
      "D":"b = a-a.shift(1)&#10;b=b[:-1]",
	  "answer":"D",
      "why":"",
      "index":52
   },
   {
      "chapter":"",
      "question":"Given a dataframe df depicting the daily returns of a portfolio,&#10;describe the output of the print statement below:&#10;Code:&#10;import pandas as pd&#10;data = [1.0, 1.05, 1.2, 0.99, 1.5]&#10;# create dates starting Jan 1st and ending Jan 5th&#10;ind = pd.date_range(start='2016-01-01', end='2016-01-05')&#10;name = ['daily_returns']&#10;df = pd.DataFrame(data=data, index=ind, columns=name)&#10;a = df['daily_returns'] - df['daily_returns'].mean()&#10;b = (a**2).sum()&#10;c = df.shape[0]-1&#10;# what is the output of the print statement below?&#10;print (b/c)**0.5",
      "A":" The sample standard deviation of daily_returns",
      "B":" The population standard deviation of daily_returns",
      "C":" The sum of squared error of daily_returns",
      "D":" The root mean squared error of daily_returns",
      "answer":"A",
      "why":">>> import pandas as pd&#10;>>> data = [1.0, 1.05, 1.2, 0.99, 1.5]&#10;>>> # create dates starting Jan 1st and ending Jan 5th&#10;>>> ind = pd.date_range(start='2016-01-01', end='2016-01-05')&#10;>>> name = ['daily_returns']&#10;>>> df = pd.DataFrame(data=data, index=ind, columns=name)&#10;>>> a = df['daily_returns'] - df['daily_returns'].mean()&#10;>>> b = (a**2).sum()&#10;>>> c = df.shape[0]-1&#10;>>> # what is the output of the print statement below?&#10;>>> print (b/c)**0.5&#10;0.213939&#10;>>> # pandas function for sample std&#10;>>> df.std()&#10;daily_returns    0.213939&#10;",
      "index":53
   },
   {
      "chapter":"",
      "question":"How should section A be filled to print out only the first two values in the array as seen in the sample output below:&#10;Which of the following returns the last five values of the array&#10;Code:&#10;import numpy as np&#10;a = np.random.random([5])&#10;print a&#10;print _A_&#10;Output:&#10;[ 0.70059652  0.98449675  0.75068418  0.31808623  0.14485409]&#10;[ 0.70059652  0.98449675]",
      "A":" a[-2]",
      "B":" a[:-2]",
      "C":" a[-5:-3]",
      "D":" a[2:-1]",
      "answer":"C",
      "why":">>> import numpy as np&#10;>>> a = np.random.random([5])&#10;>>> print a&#10;[ 0.70059652  0.98449675  0.75068418  0.31808623  0.14485409]&#10;>>> print print a[-5:-3]&#10;[ 0.70059652  0.98449675]&#10;",
      "index":54
   },
   {
      "chapter":"",
      "question":"Given 100 days of data (sampled daily), which is the proper python formula to calculate sharpe ratio? Assume sr is Sharpe Ratio, dr is daily return, rfr is risk-free-rate and np is a numpy library",
      "A":"sr = np.sqrt(252) * (dr - rfr).mean()/dr.std()",
      "B":"sr = np.sqrt(252) * np.std(dr - rfr)/np.mean(dr -rfr)",
      "C":"sr = np.sqrt(252) * np.mean(dr - rfr)/np.std(dr)",
      "D":"sr = np.sqrt(100) * (dr - rfr).mean()/dr.std()",
      "answer":"A",
      "why":"proof of difference:&#10;import pandas as pd&#10;import numpy as np&#10;def assess_port():&#10;    data = [[\"2010-12-08\", .0028],[\"2010-12-09\", .0015],[\"2010-12-10\", -.0054],[\"2010-12-11\", -.0058],[\"2010-12-12\", .0061],[\"2010-12-13\", .0011]]&#10;    dr = pd.DataFrame(data)&#10;    pd_sr = np.sqrt(252) * (dr).mean()/dr.std()&#10;    np_sr = np.sqrt(252) * np.mean(dr).mean()/np.std(dr)&#10;    return pd_sr.ix[1], np_sr.ix[1]&#10;if __name__ == \"__main__\":&#10;    pd_sr, np_sr = assess_port()&#10;    print \"Pandas Sharpe Ratio: \", pd_sr&#10;    print \"Numpy Sharpe Ratio: \", np_sr&#10;",
      "index":55
   },
   {
      "chapter":"",
      "question":"Which is the correct code for Section _A_ to set the start date values in a Pandas Datafame to 0 assuming there are two or more securities?&#10;dates = pd.date_range(dt.datetime(2005,01,01), dt.datetime(2005,01,05))&#10;# data_frame is a Pandas Data Frame retrieved using the util.py helper function&#10;data_frame = get_data(['GOOG','AAPL','GLD'], dates)&#10;#set first trading day in series to 0&#10;_A_&#10;print data_frame&#10;Output:&#10;               SPY    GOOG   AAPL    GLD&#10;2005-01-03    0.00    0.00   0.00   0.00&#10;2005-01-04  102.65  194.50  31.83  42.74&#10;2005-01-05  101.94  193.51  32.11  42.67",
      "A":" data_frame.ix[:,0] = 0",
      "B":" data_frame.ix[0,:] = 0",
      "C":" data_frame[0,:] = 0",
      "D":" data_frame[:,0] = 0",
      "answer":"B",
      "why":"Transcript:&#10;>>> dates = pd.date_range(dt.datetime(2005,01,01), dt.datetime(2005,01,05))&#10;>>> data_frame = get_data(['GOOG','AAPL','GLD'], dates)&#10;>>>&#10;>>> data_frame.ix[0,:] = 0&#10;>>> print data_frame&#10;               SPY    GOOG   AAPL    GLD&#10;2005-01-03    0.00    0.00   0.00   0.00&#10;2005-01-04  102.65  194.50  31.83  42.74&#10;2005-01-05  101.94  193.51  32.11  42.67&#10;",
      "index":56
   },
   {
      "chapter":"",
      "question":"What is the output of the following code:&#10;import numpy as np&#10;a=np.array([(10.0,20.0),(1.0,2.0)])  &#10;b=np.array([(100,200),(1,2)])&#10;print \"\nDivide a by b:\n\", a/b",
      "A":"  Divide a by b:&#10;        [[0 0]&#10;         [1 1]]",
      "B":"  Divide a by b:&#10;        [[ 0.1  0.1]&#10;         [ 1.   1. ]]",
      "C":"  Divide a by b:&#10;        [[0.0 0.0]&#10;         [1.0 1.0]]",
      "D":"  Divide a by b:&#10;        [[10 10]&#10;         [.10 .10]]",
      "answer":"B",
      "why":">>>import numpy as np&#10;>>>a=np.array([(10.0,20.0),(1.0,2.0)])&#10;>>>b=np.array([(100,200),(1,2)])&#10;>>>print \"\nDivide a by b:\n\", a/b&#10;Divide a by b:&#10;[[ 0.1  0.1]&#10; [ 1.   1. ]]&#10;",
      "index":57
   },
   {
      "chapter":"",
      "question":"How should 'section A' be filled in to complete code that will cause the following output:&#10;Code:&#10;import pandas as pd&#10;d = {'one' : [1., 2., 3., 4.],&#10;     'two' : [2., 3., 4., 5.],&#10;     'chaz': [3., 10., -2., 0]}&#10;df = pd.DataFrame(d)&#10;df_dic = {}&#10;for i in range(-2,3):&#10;        df_dic[\"{0}\".format(i)] = df * i&#10;print _A_&#10;Output:&#10;   chaz  one  two&#10;0    12    4    8&#10;1    40    8   12&#10;2    -8   12   16&#10;3     0   16   20",
      "A":" df_dic[1] * 4",
      "B":" df_dic[2]",
      "C":" df_dic['2']",
      "D":" df_dic['2'] - df_dic['-2']",
      "answer":"D",
      "why":">>> import pandas as pd&#10;>>> d = {'one' : [1., 2., 3., 4.],&#10;     'two' : [2., 3., 4., 5.],&#10;     'chaz': [3., 10., -2., 0]}&#10;>>> df = pd.DataFrame(d)&#10;>>> df_dic = {}&#10;>>> for i in range(-2,3):&#10;                df_dic[\"{0}\".format(i)] = df * i&#10;>>> print df_dic['2'] - df_dic['-2']&#10;",
      "index":58
   },
   {
      "chapter":"",
      "question":"What is the output of the following code?&#10;Code:&#10;import numpy as np&#10;data = np.array([&#10;        [2.0, 4.0, 8.0],&#10;        [1.0, 2.0, 4.0],&#10;        [4.0, 8.0, 16.0]])&#10;output = data.sum(axis=1)&#10;print(output)",
      "A":"49.",
      "B":" [7., 14., 28.]",
      "C":" 14.",
      "D":" [14., 7., 28.]",
      "answer":"D",
      "why":">>> import numpy as np&#10;>>> data = np.array([[2.0, 4.0, 8.0],[1.0, 2.0, 4.0],[4.0, 8.0, 16.0]])&#10;>>> output = data.sum(axis=1)&#10;>>> print(output)&#10;>>> [14., 7., 28.]&#10;",
      "index":59
   },
   {
      "chapter":"",
      "question":"What is the output of this python code?&#10;Code:&#10;array_1 = [[0, 1, 2, 3, 4],&#10;           [5, 6, 7, 8, 9],&#10;           [10, 11, 12, 13, 14],&#10;           [15, 16, 17, 18, 19],&#10;           [20, 21, 22, 23, 24],&#10;           [25, 26, 27, 28, 29]]&#10;array_2 = [[0, 1, 2, 3, 4],&#10;           [5, 6, 7, 8, 9]]&#10;df = pd.DataFrame(array_1, columns=list('abcde'))&#10;x = np.array(array_2)&#10;df = df.ix[2:2, ['a', 'b']] * x[-1, 1:5:2]&#10;print df.get_values()",
      "A":" [[25 42]]",
      "B":" [[60 88]]",
      "C":" [[50 77]]",
      "D":" Error message",
      "answer":"B",
      "why":">>> import pandas as pd&#10;>>> import numpy as np&#10;>>> array_1 = [[0, 1, 2, 3, 4],&#10;...            [5, 6, 7, 8, 9],&#10;...            [10, 11, 12, 13, 14],&#10;...            [15, 16, 17, 18, 19],&#10;...            [20, 21, 22, 23, 24],&#10;...            [25, 26, 27, 28, 29]]&#10;>>> array_2 = [[0, 1, 2, 3, 4],&#10;...            [5, 6, 7, 8, 9]]&#10;>>> df = pd.DataFrame(array_1, columns=list('abcde'))&#10;>>> x = np.array(array_2)&#10;>>>&#10;>>> df = df.ix[2:2, ['a', 'b']] * x[-1, 1:5:2]&#10;>>> print df.get_values()&#10;[[60 88]]&#10;",
      "index":60
   },
   {
      "chapter":"",
      "question":"What is the output of the following code?&#10;import numpy as np&#10;a = np.array([[ 1,  2,  3,  4],&#10;              [ 5,  6,  7,  8],&#10;              [ 9, 10, 11, 12],&#10;              [13, 14, 15, 16]])&#10;print a[-1:,1:3]",
      "A":"[10 11]",
      "B":"[14 15]",
      "C":"[14 15 16]",
      "D":"[13 14 15 16]",
      "answer":"B",
      "why":">>> import numpy as np&#10;>>> a = np.array([[ 1,  2,  3,  4],&#10;...               [ 5,  6,  7,  8],&#10;...               [ 9, 10, 11, 12],&#10;...               [13, 14, 15, 16]])&#10;>>> print a[-1:,1:3]&#10;[14 15]&#10;",
      "index":61
   },
   {
      "chapter":"",
      "question":"What would be the output of the following code:&#10;Code:&#10;import numpy as np&#10;a = np.array([[ 1, 2, 3],&#10;              [ 4, 5, 6],&#10;              [ 7, 8, 9]])&#10;print a[0,:] * sum(a[0:2,-2])",
      "A":" [ 5 10 15]",
      "B":" [ 2 4 6]",
      "C":" [ 7 14 21]",
      "D":" [ 7 28 49]",
      "answer":"C",
      "why":">>> import numpy as np&#10;>>> a = np.array([[ 1, 2, 3],&#10;...               [ 4, 5, 6],&#10;...               [ 7, 8, 9]])&#10;...&#10;>>> print a[0,:]&#10;[1 2 3]&#10;>>> print sum(a[0:2,-2])&#10;7&#10;>>> print a[0,:] * sum(a[0:2,-2])&#10;[ 7 14 21]&#10;",
      "index":62
   },
   {
      "chapter":"",
      "question":"By default, numpy's std() function calculates the uncorrected sample standard deviation of a given numpy array. If x is a numpy array of real numbers, then, which of the following lines of code will return the same value as numpy.std(x)?",
      "A":" sum((x - x.mean())**2) / (len(x))",
      "B":" sum((x - x.mean())**2) / (len(x) - 1)",
      "C":" math.sqrt(sum((x - x.mean())**2) / (len(x)))",
      "D":" math.sqrt(sum((x - x.mean())**2) / (len(x) - 1))",
      "answer":"C",
      "why":"A calculates the uncorrected sample variance, B calculates the corrected sample variance, and D calculates the corrected sample standard deviation.&#10;&#10;import math&#10;import numpy&#10;&#10;x = numpy.random.rand(1000)&#10;&#10;a = sum((x - x.mean())**2) / (len(x))&#10;b = sum((x - x.mean())**2) / (len(x) - 1)&#10;c = math.sqrt(sum((x - x.mean())**2) / (len(x)))&#10;d = math.sqrt(sum((x - x.mean())**2) / (len(x) - 1))&#10;&#10;assert(a != numpy.std(x) and a == numpy.var(x))&#10;assert(b != numpy.std(x) and b == numpy.var(x, ddof=1))&#10;assert(c == numpy.std(x))&#10;assert(d != numpy.std(x) and d == numpy.std(x, ddof=1))&#10;&#10;",
      "index":63
   },
   {
      "chapter":"",
      "question":"Choose the correct output of the print statement of the following code:&#10;&#10;import numpy as np&#10;&#10;C = np.ndarray([2,2], buffer=np.matrix([[1, 2], [3, 4]]), dtype=int)&#10;&#10;print C[:,0:1]&#10;",
      "A":" [1 3]",
      "B":" [[1]&#10;    [3]]",
      "C":" [[1 2]&#10;    [3 4]]",
      "D":" [[1 2]]",
      "answer":"B",
      "why":">>> import numpy as np&#10;>>> C = np.ndarray([2,2], buffer=np.matrix([[1, 2], [3, 4]]), dtype=int)&#10;>>> print C&#10;[[1]&#10; [3]]&#10;",
      "index":64
   },
   {
      "chapter":"",
      "question":"These pieces of python code gives out outcomes as:&#10;>>> x = np.arange(1,3).reshape(-1,1)&#10;[[1],&#10; [2]]&#10;>>> a = np.array([1.0, 2.0, 3.0])&#10;>>> b = [2.0]&#10;>>> print a * b&#10;[ 2.  4.  6.]&#10;Then what is the output of this python code?&#10;>>> import numpy as np&#10;>>> a = np.arange(1,10).reshape(-1,1)&#10;>>> b = np.arange(1,10)&#10;>>> print a*b",
      "A":"&#10;[ 1  4  9 16 25 36 49 64 81]",
      "B":"&#10;[[ 1  2  3  4  5  6  7  8  9]&#10; [ 2  4  6  8 10 12 14 16 18]&#10; [ 3  6  9 12 15 18 21 24 27]&#10; [ 4  8 12 16 20 24 28 32 36]&#10; [ 5 10 15 20 25 30 35 40 45]&#10; [ 6 12 18 24 30 36 42 48 54]&#10; [ 7 14 21 28 35 42 49 56 63]&#10; [ 8 16 24 32 40 48 56 64 72]&#10; [ 9 18 27 36 45 54 63 72 81]]",
      "C":"&#10;[ 9 16 21 24 25 24 21 16  9]",
      "D":"&#10;[285]    # np.sum([1,  4,  9, 16, 25, 36, 49, 64, 81]) = 285",
      "answer":"B",
      "why":"&#10;>>> import numpy as np&#10;>>> a = np.arange(1,10).reshape(-1,1)&#10;>>> b = np.arange(1,10)&#10;>>> print a&#10;[[1]&#10; [2]&#10; [3]&#10; [4]&#10; [5]&#10; [6]&#10; [7]&#10; [8]&#10; [9]]&#10;>>> print b&#10;[1 2 3 4 5 6 7 8 9]&#10;>>> print a*b&#10;[[ 1  2  3  4  5  6  7  8  9]&#10; [ 2  4  6  8 10 12 14 16 18]&#10; [ 3  6  9 12 15 18 21 24 27]&#10; [ 4  8 12 16 20 24 28 32 36]&#10; [ 5 10 15 20 25 30 35 40 45]&#10; [ 6 12 18 24 30 36 42 48 54]&#10; [ 7 14 21 28 35 42 49 56 63]&#10; [ 8 16 24 32 40 48 56 64 72]&#10; [ 9 18 27 36 45 54 63 72 81]]&#10;>>> print b*a  ## The same as a*b&#10;[[ 1  2  3  4  5  6  7  8  9]&#10; [ 2  4  6  8 10 12 14 16 18]&#10; [ 3  6  9 12 15 18 21 24 27]&#10; [ 4  8 12 16 20 24 28 32 36]&#10; [ 5 10 15 20 25 30 35 40 45]&#10; [ 6 12 18 24 30 36 42 48 54]&#10; [ 7 14 21 28 35 42 49 56 63]&#10; [ 8 16 24 32 40 48 56 64 72]&#10; [ 9 18 27 36 45 54 63 72 81]]&#10;",
      "index":65
   },
   {
      "chapter":"",
      "question":"How should section A be filled in to complete code that will cause the following output:&#10;Code:&#10;import pandas as pd&#10;left_frame = pd.DataFrame({'key': range(5),&#10;                           'left_value': ['a', 'b', 'c', 'd', 'e']})&#10;right_frame = pd.DataFrame({'key': range(2, 7),&#10;                           'right_value': ['f', 'g', 'h', 'i', 'j']})&#10;print left_frame&#10;print right_frame&#10;print _A_&#10;Output:&#10;   key left_value&#10;0    0          a&#10;1    1          b&#10;2    2          c&#10;3    3          d&#10;4    4          e&#10;   key right_value&#10;0    2           f&#10;1    3           g&#10;2    4           h&#10;3    5           i&#10;4    6           j&#10;   key left_value right_value&#10;0    2          c           f&#10;1    3          d           g&#10;2    4          e           h",
      "A":" pd.merge(left_frame, right_frame, on='key', how='outer')",
      "B":" pd.concat([left_frame, right_frame])",
      "C":" pd.merge(left_frame, right_frame, on='key', how='inner')",
      "D":" pd.concat([left_frame, right_frame], axis=1)",
      "answer":"C",
	  "why":"",
	  "index":66
   },
   {
      "chapter":"",
      "question":"What is the output of the following python code?&#10;Code:&#10;import numpy as np&#10;array = np.random.randint(4, 5, size = (6, 7))&#10;print array.shape[0]",
      "A":" 4",
      "B":" 5",
      "C":" 6",
      "D":" 7",
      "answer":"C",
      "why":">>> import numpy as np&#10;>>> array = np.random.randint(4, 5, size = (6, 7))&#10;>>> print array.shape[0]&#10;6&#10;>>>&#10;",
      "index":67
   },
   {
      "chapter":"",
      "question":"What is the output of the following code?&#10;Code:&#10;import numpy as np&#10;x = np.array([5,4,3,2,1])&#10;print x[-1:] * x[:-1]",
      "A":" [20 12 6 2]",
      "B":" [5 8 9 8]",
      "C":" [10 12 12 10]",
      "D":" [5 4 3 2]",
      "answer":"D",
      "why":"Transcript:&#10;>>> import numpy as np&#10;>>> x = np.array([5,4,3,2,1])&#10;>>> print x[-1:] * x[:-1]&#10;[5 4 3 2]",
	  "index":68
   }
]